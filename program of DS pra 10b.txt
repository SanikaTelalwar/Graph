PROGRAM:

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct Node {
    int vertex;
    struct Node* next;
} Node;

typedef struct GraphList {
    int vertices;
    Node** adjList;
} GraphList;

// Create a new node
Node* createNode(int vertex) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->vertex = vertex;
    newNode->next = NULL;
    return newNode;
}

// Initialize graph
GraphList* createGraphList(int vertices) {
	int i;
    GraphList* graph = (GraphList*)malloc(sizeof(GraphList));
    graph->vertices = vertices;
    graph->adjList = (Node*)malloc(vertices * sizeof(Node));

    for ( i = 0; i < vertices; i++) {
        graph->adjList[i] = NULL;
    }
    return graph;
}

// Add edge
void addEdgeList(GraphList* graph, int u, int v) {
    Node* newNode = createNode(v);
    newNode->next = graph->adjList[u];
    graph->adjList[u] = newNode;

    newNode = createNode(u);
    newNode->next = graph->adjList[v];
    graph->adjList[v] = newNode;
}

// Display adjacency list
void displayList(GraphList* graph) {
	int i;
    for (i = 0; i < graph->vertices; i++) {
        Node* temp = graph->adjList[i];
        printf("Vertex %d: ", i);
        while (temp) {
            printf("%d -> ", temp->vertex);
            temp = temp->next;
        }
        printf("NULL\n");
    }
}

// BFS Traversal
void bfsList(GraphList* graph, int start) {
	int i;
    bool visited[graph->vertices];
    for (i = 0; i < graph->vertices; i++) {
        visited[i] = false;
    }

    int queue[graph->vertices], front = 0, rear = 0;
    visited[start] = true;
    queue[rear++] = start;

    printf("BFS Traversal: ");
    while (front < rear) {
        int current = queue[front++];
        printf("%d ", current);

        Node* temp = graph->adjList[current];
        while (temp) {
            int adjVertex = temp->vertex;
            if (!visited[adjVertex]) {
                visited[adjVertex] = true;
                queue[rear++] = adjVertex;
            }
            temp = temp->next;
        }
    }
    printf("\n");
}

// DFS Utility function
void dfsListUtil(GraphList* graph, int vertex, bool visited[]) {
    visited[vertex] = true;
    printf("%d ", vertex);

    Node* temp = graph->adjList[vertex];
    while (temp) {
        int adjVertex = temp->vertex;
        if (!visited[adjVertex]) {
            dfsListUtil(graph, adjVertex, visited);
        }
        temp = temp->next;
    }
}

// DFS Traversal
void dfsList(GraphList* graph, int start) {
	int i;
    bool visited[graph->vertices];
    for ( i = 0; i < graph->vertices; i++) {
        visited[i] = false;
    }

    printf("DFS Traversal: ");
    dfsListUtil(graph, start, visited);
    printf("\n");
}

int main() {
    GraphList* graph = createGraphList(5);

    addEdgeList(graph, 0, 1);
    addEdgeList(graph, 0, 4);
    addEdgeList(graph, 1, 2);
    addEdgeList(graph, 1, 3);
    addEdgeList(graph, 1, 4);
    addEdgeList(graph, 2, 3);
    addEdgeList(graph, 3, 4);

    printf("Adjacency List:\n");
    displayList(graph);

    bfsList(graph, 0);
    dfsList(graph, 0);

    return 0;
}